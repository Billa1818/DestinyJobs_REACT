import api from './api';

class ValidationService {
  
  /**
   * Met √† jour le statut d'une candidature
   * @param {string} applicationId - ID de la candidature
   * @param {string} status - Nouveau statut (ACCEPTED, REJECTED, SHORTLISTED, etc.)
   * @param {string} notes - Notes ou commentaires sur la d√©cision
   * @returns {Promise<Object>} R√©ponse de la mise √† jour
   */
  async updateApplicationStatus(applicationId, status, notes = '') {
    try {
      console.log(`üîç updateApplicationStatus appel√© pour la candidature ${applicationId}`);
      console.log('üîç Nouveau statut:', status);
      console.log('üîç Notes:', notes);
      
      const payload = {
        status: status,
        notes: notes
      };

      const url = `/api/applications/status/update/${applicationId}/`;
      console.log('üì° URL de requ√™te:', url);
      console.log('üì° Payload:', payload);
      
      const response = await api.put(url, payload);
      console.log('‚úÖ Statut de candidature mis √† jour:', response.data);
      
      return response.data;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la mise √† jour du statut de la candidature ${applicationId}:`, error);
      console.error('‚ùå D√©tails de l\'erreur:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
        config: error.config
      });
      
      throw new Error(`Impossible de mettre √† jour le statut de la candidature: ${error.message}`);
    }
  }

  /**
   * Accepter une candidature
   * @param {string} applicationId - ID de la candidature
   * @param {string} notes - Notes sur la d√©cision d'acceptation
   * @returns {Promise<Object>} R√©ponse de la mise √† jour
   */
  async acceptApplication(applicationId, notes = 'Candidat parfaitement qualifi√© pour le poste') {
    try {
      console.log(`‚úÖ Acceptation de la candidature ${applicationId}`);
      return await this.updateApplicationStatus(applicationId, 'SHORTLISTED', notes);
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'acceptation de la candidature ${applicationId}:`, error);
      throw error;
    }
  }

  /**
   * Rejeter une candidature
   * @param {string} applicationId - ID de la candidature
   * @param {string} notes - Notes sur la d√©cision de rejet
   * @returns {Promise<Object>} R√©ponse de la mise √† jour
   */
  async rejectApplication(applicationId, notes = 'Candidature non retenue') {
    try {
      console.log(`‚ùå Rejet de la candidature ${applicationId}`);
      return await this.updateApplicationStatus(applicationId, 'REJECTED', notes);
    } catch (error) {
      console.error(`‚ùå Erreur lors du rejet de la candidature ${applicationId}:`, error);
      throw error;
    }
  }

  /**
   * Pr√©s√©lectionner une candidature pour entretien
   * @param {string} applicationId - ID de la candidature
   * @param {string} notes - Notes sur la pr√©s√©lection
   * @returns {Promise<Object>} R√©ponse de la mise √† jour
   */
  async shortlistApplication(applicationId, notes = 'Profil int√©ressant, convocation pour entretien') {
    try {
      console.log(`‚≠ê Pr√©s√©lection de la candidature ${applicationId}`);
      return await this.updateApplicationStatus(applicationId, 'SHORTLISTED', notes);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la pr√©s√©lection de la candidature ${applicationId}:`, error);
      throw error;
    }
  }

  /**
   * Programmer un entretien
   * @param {string} applicationId - ID de la candidature
   * @param {string} notes - D√©tails de l'entretien
   * @returns {Promise<Object>} R√©ponse de la mise √† jour
   */
  async scheduleInterview(applicationId, notes = 'Entretien programm√©') {
    try {
      console.log(`üìÖ Programmation d'entretien pour la candidature ${applicationId}`);
      return await this.updateApplicationStatus(applicationId, 'INTERVIEW_SCHEDULED', notes);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la programmation de l'entretien ${applicationId}:`, error);
      throw error;
    }
  }

  /**
   * Mettre en attente une candidature
   * @param {string} applicationId - ID de la candidature
   * @param {string} notes - Raison de la mise en attente
   * @returns {Promise<Object>} R√©ponse de la mise √† jour
   */
  async putOnHold(applicationId, notes = 'Mise en attente pour r√©vision') {
    try {
      console.log(`‚è∏Ô∏è Mise en attente de la candidature ${applicationId}`);
      return await this.updateApplicationStatus(applicationId, 'ON_HOLD', notes);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la mise en attente de la candidature ${applicationId}:`, error);
      throw error;
    }
  }

  /**
   * Marquer comme vue une candidature
   * @param {string} applicationId - ID de la candidature
   * @returns {Promise<Object>} R√©ponse de la mise √† jour
   */
  async markAsViewed(applicationId) {
    try {
      console.log(`üëÅÔ∏è Marquage comme vue de la candidature ${applicationId}`);
      return await this.updateApplicationStatus(applicationId, 'VIEWED', 'Candidature consult√©e');
    } catch (error) {
      console.error(`‚ùå Erreur lors du marquage comme vue de la candidature ${applicationId}:`, error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer l'historique des statuts d'une candidature
   * @param {string} applicationId - ID de la candidature
   * @returns {Promise<Object>} Historique des statuts
   */
  async getApplicationStatusHistory(applicationId) {
    try {
      console.log(`üìö R√©cup√©ration de l'historique des statuts pour la candidature ${applicationId}`);
      
      const url = `/api/applications/status/history/${applicationId}/`;
      const response = await api.get(url);
      
      console.log('‚úÖ Historique des statuts r√©cup√©r√©:', response.data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration de l'historique des statuts ${applicationId}:`, error);
      throw new Error(`Impossible de r√©cup√©rer l'historique des statuts: ${error.message}`);
    }
  }

  /**
   * R√©cup√©rer les statistiques des statuts pour une offre
   * @param {string} offerId - ID de l'offre
   * @param {string} offerType - Type d'offre (JOB, CONSULTATION, FUNDING)
   * @returns {Promise<Object>} Statistiques des statuts
   */
  async getStatusStatistics(offerId, offerType = 'JOB') {
    try {
      console.log(`üìä R√©cup√©ration des statistiques des statuts pour l'offre ${offerId} (${offerType})`);
      
      const url = `/api/applications/status/statistics/${offerId}/?offer_type=${offerType}`;
      const response = await api.get(url);
      
      console.log('‚úÖ Statistiques des statuts r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration des statistiques des statuts ${offerId}:`, error);
      throw new Error(`Impossible de r√©cup√©rer les statistiques des statuts: ${error.message}`);
    }
  }

  /**
   * Gestion des erreurs
   * @param {Object} error - Objet erreur
   * @param {string} defaultMessage - Message d'erreur par d√©faut
   * @returns {Error} - Erreur avec message format√©
   */
  handleValidationError(error, defaultMessage) {
    let message = defaultMessage;

    if (error.response?.data) {
      const errorData = error.response.data;
      
      if (errorData.error) {
        message = errorData.error;
      } else if (errorData.details) {
        const fieldErrors = Object.values(errorData.details).flat();
        message = fieldErrors.join(', ');
      } else if (typeof errorData === 'string') {
        message = errorData;
      }
    } else if (error.message) {
      message = error.message;
    }

    console.error('Validation Error:', error);
    return new Error(message);
  }
}

// Cr√©er une instance unique du service
const validationService = new ValidationService();

export default validationService; 