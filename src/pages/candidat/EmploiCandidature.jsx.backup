import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faSearch, 
  faFilter, 
  faEye, 
  faEdit, 
  faTrash, 
  faTimes,
  faCheck,
  faTimes as faReject,
  faUndo,
  faDownload,
  faCalendarAlt,
  faMapMarkerAlt,
  faBuilding,
  faMoneyBillWave,
  faClock,
  faStar,
  faSort,
  faSortUp,
  faSortDown,
  faBriefcase,
  faUserTie,
  faChartLine,
  faRocket,
  faLightbulb,
  faHeart,
  faBookmark,
  faShare,
  faEllipsisH,
  faPlus,
  faMinus,
  faChevronRight,
  faChevronLeft
} from '@fortawesome/free-solid-svg-icons';
import EmploiCandidatureRecentService from '../../services/EmploiCandidatureRecentService';
import Loader from '../../components/Loader';
import Pagination from '../../components/Pagination';

const EmploiCandidature = () => {
  const navigate = useNavigate();
  
  // √âtats principaux
  const [applications, setApplications] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // √âtats de pagination
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [totalPages, setTotalPages] = useState(0);
  const [totalCount, setTotalCount] = useState(0);
  
  // √âtats des filtres
  const [filters, setFilters] = useState({
    'application__status': '',
    'application__priority': '',
    search: ''
  });
  
  // √âtats de tri
  const [ordering, setOrdering] = useState('-application__created_at');
  
  // √âtats des actions
  const [actionLoading, setActionLoading] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [viewMode, setViewMode] = useState('cards'); // 'cards' ou 'table'
  
  // √âtats des alertes
  const [alert, setAlert] = useState({ show: false, type: '', message: '' });

  // Charger les candidatures
  const loadApplications = async () => {
    try {
      console.log('üîÑ D√©but du chargement des candidatures...');
      setLoading(true);
      setError(null);
      
      const allFilters = {
        ...filters,
        ordering
      };
      
      console.log('üìã Filtres appliqu√©s:', allFilters);
      console.log('üìÑ Page:', currentPage, 'Taille:', pageSize);
      
      const result = await EmploiCandidatureRecentService.getJobApplications(
        allFilters,
        currentPage,
        pageSize
      );
      
      console.log('‚úÖ Candidatures charg√©es avec succ√®s:', result);
      
      setApplications(result.applications);
      setTotalPages(result.pagination.totalPages);
      setTotalCount(result.pagination.count);
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des candidatures:', error);
      console.error('üìä D√©tails de l\'erreur:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      });
      setError(`Erreur lors du chargement des candidatures: ${error.message}`);
    } finally {
      console.log('üèÅ Fin du chargement, loading = false');
      setLoading(false);
    }
  };

  // Charger les candidatures au montage et lors des changements
  useEffect(() => {
    loadApplications();
  }, [currentPage, pageSize]);

  // Appliquer les filtres
  const applyFilters = () => {
    setCurrentPage(1);
  };

  // R√©initialiser les filtres
  const resetFilters = () => {
    setFilters({
      'application__status': '',
      'application__priority': '',
      search: ''
    });
    setOrdering('-application__created_at');
    setCurrentPage(1);
    loadApplications();
  };

  // G√©rer le changement de page
  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  // G√©rer le changement de taille de page
  const handlePageSizeChange = (newPageSize) => {
    setPageSize(newPageSize);
    setCurrentPage(1);
  };

  // G√©rer le tri
  const handleSort = (field) => {
    if (ordering === field) {
      setOrdering(`-${field}`);
    } else if (ordering === `-${field}`) {
      setOrdering(field);
    } else {
      setOrdering(`-${field}`);
    }
  };

  // Afficher l'ic√¥ne de tri
  const getSortIcon = (field) => {
    if (ordering === field) {
      return <FontAwesomeIcon icon={faSortUp} className="text-blue-500" />;
    } else if (ordering === `-${field}`) {
      return <FontAwesomeIcon icon={faSortDown} className="text-blue-500" />;
    }
    return <FontAwesomeIcon icon={faSort} className="text-gray-400" />;
  };

  // Mettre √† jour le statut d'une candidature
  const updateApplicationStatus = async (applicationId, newStatus) => {
    try {
      setActionLoading(applicationId);
      
      await EmploiCandidatureRecentService.updateApplicationStatus(applicationId, newStatus);
      
      await loadApplications();
      
      setAlert({
        show: true,
        type: 'success',
        message: `Statut mis √† jour avec succ√®s: ${newStatus}`
      });
      
      setTimeout(() => setAlert({ show: false, type: '', message: '' }), 3000);
      
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du statut:', error);
      setAlert({
        show: true,
        type: 'error',
        message: 'Erreur lors de la mise √† jour du statut'
      });
      
      setTimeout(() => setAlert({ show: false, type: '', message: '' }), 3000);
    } finally {
      setActionLoading(null);
    }
  };

  // Retirer une candidature
  const withdrawApplication = async (applicationId) => {
    if (window.confirm('√ätes-vous s√ªr de vouloir retirer cette candidature ?')) {
      try {
        setActionLoading(applicationId);
        
        await EmploiCandidatureRecentService.withdrawApplication(applicationId);
        
        await loadApplications();
        
        setAlert({
          show: true,
          type: 'success',
          message: 'Candidature retir√©e avec succ√®s'
        });
        
        setTimeout(() => setAlert({ show: false, type: '', message: '' }), 3000);
        
      } catch (error) {
        console.error('Erreur lors du retrait de la candidature:', error);
        setAlert({
          show: true,
          type: 'error',
          message: 'Erreur lors du retrait de la candidature'
        });
        
        setTimeout(() => setAlert({ show: false, type: '', message: '' }), 3000);
      } finally {
        setActionLoading(null);
      }
    }
  };

  // Formater la date
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Obtenir la classe CSS du statut
  const getStatusClass = (status) => {
    const statusClasses = {
      'PENDING': 'bg-gradient-to-r from-yellow-400 to-yellow-500 text-white',
      'ACCEPTED': 'bg-gradient-to-r from-green-400 to-green-500 text-white',
      'REJECTED': 'bg-gradient-to-r from-red-400 to-red-500 text-white',
      'WITHDRAWN': 'bg-gradient-to-r from-gray-400 to-gray-500 text-white',
      'INTERVIEW': 'bg-gradient-to-r from-blue-400 to-blue-500 text-white',
      'SHORTLISTED': 'bg-gradient-to-r from-purple-400 to-purple-500 text-white'
    };
    return statusClasses[status] || 'bg-gradient-to-r from-gray-400 to-gray-500 text-white';
  };

  // Obtenir la classe CSS de la priorit√©
  const getPriorityClass = (priority) => {
    const priorityClasses = {
      'HIGH': 'bg-gradient-to-r from-red-400 to-red-500 text-white',
      'NORMAL': 'bg-gradient-to-r from-blue-400 to-blue-500 text-white',
      'LOW': 'bg-gradient-to-r from-gray-400 to-gray-500 text-white'
    };
    return priorityClasses[priority] || 'bg-gradient-to-r from-gray-400 to-gray-500 text-white';
  };

  // Traduire le statut
  const translateStatus = (status) => {
    const statusTranslations = {
      'PENDING': 'En attente',
      'ACCEPTED': 'Accept√©e',
      'REJECTED': 'Refus√©e',
      'WITHDRAWN': 'Retir√©e',
      'INTERVIEW': 'En entretien',
      'SHORTLISTED': 'Pr√©-s√©lectionn√©e'
    };
    return statusTranslations[status] || status;
  };

  // Traduire la priorit√©
  const translatePriority = (priority) => {
    const priorityTranslations = {
      'HIGH': 'Haute',
      'NORMAL': 'Normale',
      'LOW': 'Basse'
    };
    return priorityTranslations[priority] || priority;
  };

  // Afficher l'alerte
  const showAlert = () => {
    if (!alert.show) return null;
    
    const alertClasses = {
      success: 'bg-gradient-to-r from-green-400 to-green-500 border-green-400 text-white',
      error: 'bg-gradient-to-r from-red-400 to-red-500 border-red-400 text-white',
      warning: 'bg-gradient-to-r from-yellow-400 to-yellow-500 border-yellow-400 text-white',
      info: 'bg-gradient-to-r from-blue-400 to-blue-500 border-blue-400 text-white'
    };
    
    return (
      <div className={`fixed top-4 right-4 z-50 p-4 border rounded-xl shadow-2xl ${alertClasses[alert.type]} transform transition-all duration-300 animate-bounce`}>
        <div className="flex items-center">
          <span className="mr-2 font-medium">{alert.message}</span>
          <button
            onClick={() => setAlert({ show: false, type: '', message: '' })}
            className="ml-2 text-white hover:text-gray-200 transition-colors"
          >
            <FontAwesomeIcon icon={faTimes} />
          </button>
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Chargement en cours...</h2>
          <p className="text-gray-600">R√©cup√©ration de vos candidatures</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header avec gradient */}
      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 text-white shadow-2xl">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="text-center">
            <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-white to-blue-100">
              Mes Candidatures aux Offres d'Emploi
            </h1>
            <p className="text-xl text-blue-100 max-w-2xl mx-auto">
              G√©rez et suivez vos candidatures avec une interface moderne et intuitive
            </p>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mt-8 relative z-10">
        {/* Alertes */}
        {showAlert()}

        {/* Statistiques avec design moderne */}
        {!loading && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-2xl shadow-xl p-6 transform hover:scale-105 transition-all duration-300 border-l-4 border-blue-500">
              <div className="flex items-center">
                <div className="p-3 bg-gradient-to-r from-blue-400 to-blue-600 rounded-xl text-white">
                  <FontAwesomeIcon icon={faBriefcase} className="text-2xl" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total</p>
                  <p className="text-3xl font-bold text-gray-900">{totalCount}</p>
                </div>
              </div>
            </div>
            
            <div className="bg-white rounded-2xl shadow-xl p-6 transform hover:scale-105 transition-all duration-300 border-l-4 border-yellow-500">
              <div className="flex items-center">
                <div className="p-3 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-xl text-white">
                  <FontAwesomeIcon icon={faClock} className="text-2xl" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">En attente</p>
                  <p className="text-3xl font-bold text-gray-900">
                    {applications && applications.length > 0 
                      ? applications.filter(app => app.application?.status === 'PENDING').length 
                      : 0}
                  </p>
                </div>
              </div>
            </div>
            
            <div className="bg-white rounded-2xl shadow-xl p-6 transform hover:scale-105 transition-all duration-300 border-l-4 border-green-500">
              <div className="flex items-center">
                <div className="p-3 bg-gradient-to-r from-green-400 to-green-600 rounded-xl text-white">
                  <FontAwesomeIcon icon={faCheck} className="text-2xl" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Accept√©es</p>
                  <p className="text-3xl font-bold text-gray-900">
                    {applications && applications.length > 0 
                      ? applications.filter(app => app.application?.status === 'ACCEPTED').length 
                      : 0}
                  </p>
                </div>
              </div>
            </div>
            
            <div className="bg-white rounded-2xl shadow-xl p-6 transform hover:scale-105 transition-all duration-300 border-l-4 border-purple-500">
              <div className="flex items-center">
                <div className="p-3 bg-gradient-to-r from-purple-400 to-purple-600 rounded-xl text-white">
                  <FontAwesomeIcon icon={faStar} className="text-2xl" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Pr√©-s√©lectionn√©es</p>
                  <p className="text-3xl font-bold text-gray-900">
                    {applications && applications.length > 0 
                      ? applications.filter(app => app.application?.status === 'SHORTLISTED').length 
                      : 0}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Barre d'outils moderne */}
        {!loading && (
          <div className="bg-white rounded-2xl shadow-xl border border-gray-100 mb-8 overflow-hidden">
            <div className="p-6 border-b border-gray-100">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
                {/* Recherche moderne */}
                <div className="flex-1 max-w-md">
                  <div className="relative">
                    <FontAwesomeIcon 
                      icon={faSearch} 
                      className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 text-lg" 
                    />
                    <input
                      type="text"
                      placeholder="Rechercher par nom, entreprise..."
                      value={filters.search}
                      onChange={(e) => setFilters({ ...filters, search: e.target.value })}
                      className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-blue-100 focus:border-blue-500 transition-all duration-300 text-lg"
                    />
                  </div>
                </div>

                {/* Boutons d'action */}
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setShowFilters(!showFilters)}
                    className={`px-6 py-3 rounded-xl border-2 flex items-center gap-2 font-medium transition-all duration-300 ${
                      showFilters 
                        ? 'bg-blue-50 border-blue-300 text-blue-700 shadow-lg' 
                        : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-blue-300'
                    }`}
                  >
                    <FontAwesomeIcon icon={faFilter} />
                    Filtres
                  </button>
                  
                  <button
                    onClick={applyFilters}
                    className="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:scale-105"
                  >
                    Appliquer
                  </button>
                  
                  <button
                    onClick={resetFilters}
                    className="px-6 py-3 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-xl hover:from-gray-600 hover:to-gray-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:scale-105"
                  >
                    R√©initialiser
                  </button>
                </div>
              </div>
            </div>

            {/* Filtres avanc√©s avec animation */}
            {showFilters && (
              <div className="p-6 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-blue-50 animate-slideDown">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* Filtre par statut */}
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                      Statut de la candidature
                    </label>
                    <select
                      value={filters['application__status']}
                      onChange={(e) => setFilters({ ...filters, 'application__status': e.target.value })}
                      className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-blue-100 focus:border-blue-500 transition-all duration-300"
                    >
                      <option value="">Tous les statuts</option>
                      <option value="PENDING">En attente</option>
                      <option value="ACCEPTED">Accept√©e</option>
                      <option value="REJECTED">Refus√©e</option>
                      <option value="WITHDRAWN">Retir√©e</option>
                      <option value="INTERVIEW">En entretien</option>
                      <option value="SHORTLISTED">Pr√©-s√©lectionn√©e</option>
                    </select>
                  </div>

                  {/* Filtre par priorit√© */}
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                      Priorit√©
                    </label>
                    <select
                      value={filters['application__priority']}
                      onChange={(e) => setFilters({ ...filters, 'application__priority': e.target.value })}
                      className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-blue-100 focus:border-blue-500 transition-all duration-300"
                    >
                      <option value="">Toutes les priorit√©s</option>
                      <option value="HIGH">Haute</option>
                      <option value="NORMAL">Normale</option>
                      <option value="LOW">Basse</option>
                    </select>
                  </div>

                  {/* Taille de page */}
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                      Affichage par page
                    </label>
                    <select
                      value={pageSize}
                      onChange={(e) => handlePageSizeChange(parseInt(e.target.value))}
                      className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:ring-4 focus:ring-blue-100 focus:border-blue-500 transition-all duration-300"
                    >
                      <option value={10}>10 candidatures</option>
                      <option value={20}>20 candidatures</option>
                      <option value={50}>50 candidatures</option>
                      <option value={100}>100 candidatures</option>
                    </select>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* S√©lecteur de vue */}
        {!loading && applications && applications.length > 0 && (
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-4">
              <h3 className="text-xl font-semibold text-gray-800">
                {applications.length} candidature{applications.length > 1 ? 's' : ''} trouv√©e{applications.length > 1 ? 's' : ''}
              </h3>
            </div>
            
            <div className="flex items-center gap-2 bg-white rounded-xl p-1 shadow-lg border border-gray-200">
              <button
                onClick={() => setViewMode('cards')}
                className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                  viewMode === 'cards' 
                    ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg' 
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <FontAwesomeIcon icon={faBriefcase} className="mr-2" />
                Cartes
              </button>
              <button
                onClick={() => setViewMode('table')}
                className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                  viewMode === 'table' 
                    ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg' 
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <FontAwesomeIcon icon={faChartLine} className="mr-2" />
                Tableau
              </button>
            </div>
          </div>
        )}

        {/* Liste des candidatures */}
        {error ? (
          <div className="bg-gradient-to-r from-red-50 to-red-100 border-2 border-red-200 rounded-2xl p-8 text-center shadow-xl">
            <div className="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
            <h3 className="text-2xl font-bold text-red-800 mb-4">Erreur de chargement</h3>
            <p className="text-red-700 mb-6 text-lg">{error}</p>
            <button
              onClick={loadApplications}
              className="px-8 py-4 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-xl hover:from-red-600 hover:to-red-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              <FontAwesomeIcon icon={faRocket} className="mr-2" />
              R√©essayer
            </button>
          </div>
        ) : !applications || applications.length === 0 ? (
          <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-12 text-center">
            <div className="text-gray-400 text-8xl mb-6">üìã</div>
            <h3 className="text-3xl font-bold text-gray-800 mb-4">
              {!applications ? 'Chargement en cours...' : 'Aucune candidature trouv√©e'}
            </h3>
            <p className="text-gray-600 mb-8 text-lg max-w-md mx-auto">
              {!applications 
                ? 'Veuillez patienter pendant le chargement de vos candidatures...'
                : filters.search || filters['application__status'] || filters['application__priority']
                  ? 'Essayez de modifier vos filtres de recherche pour trouver plus de r√©sultats'
                  : 'Vous n\'avez pas encore postul√© √† des offres d\'emploi. Commencez votre recherche !'
              }
            </p>
            {applications && !filters.search && !filters['application__status'] && !filters['application__priority'] && (
              <button
                onClick={() => navigate('/emplois')}
                className="px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300 font-medium shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                <FontAwesomeIcon icon={faRocket} className="mr-2" />
                Parcourir les offres
              </button>
            )}
          </div>
        ) : viewMode === 'cards' ? (
          // Vue en cartes
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            {applications.map((application) => (
              <div key={application.id} className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden transform hover:scale-105 transition-all duration-300 hover:shadow-2xl">
                {/* Header de la carte */}
                <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-4 text-white">
                  <div className="flex items-center justify-between mb-2">
                    <span className={`px-3 py-1 rounded-full text-xs font-semibold ${getStatusClass(application.application?.status)}`}>
                      {translateStatus(application.application?.status)}
                    </span>
                    <div className="flex items-center gap-2">
                      <button className="text-white hover:text-blue-100 transition-colors p-1">
                        <FontAwesomeIcon icon={faBookmark} />
                      </button>
                      <button className="text-white hover:text-blue-100 transition-colors p-1">
                        <FontAwesomeIcon icon={faShare} />
                      </button>
                    </div>
                  </div>
                  <h3 className="font-bold text-lg truncate">
                    {application.job_offer?.title || 'Titre non disponible'}
                  </h3>
                </div>

                {/* Contenu de la carte */}
                <div className="p-4">
                  <div className="space-y-3 mb-4">
                    <div className="flex items-center text-gray-600">
                      <FontAwesomeIcon icon={faBuilding} className="w-4 mr-3 text-blue-500" />
                      <span className="truncate">{application.job_offer?.recruiter?.company_name || 'Entreprise non disponible'}</span>
                    </div>
                    <div className="flex items-center text-gray-600">
                      <FontAwesomeIcon icon={faMapMarkerAlt} className="w-4 mr-3 text-green-500" />
                      <span className="truncate">{application.job_offer?.location || 'Localisation non disponible'}</span>
                    </div>
                    <div className="flex items-center text-gray-600">
                      <FontAwesomeIcon icon={faCalendarAlt} className="w-4 mr-3 text-purple-500" />
                      <span className="text-sm">Postul√© le {formatDate(application.application?.created_at)}</span>
                    </div>
                    {application.job_offer?.salary_min && (
                      <div className="flex items-center text-gray-600">
                        <FontAwesomeIcon icon={faMoneyBillWave} className="w-4 mr-3 text-yellow-500" />
                        <span className="text-sm">{application.job_offer.salary_min} - {application.job_offer.salary_max || 'N/A'} FCFA</span>
                      </div>
                    )}
                  </div>

                  {/* Score IA */}
                  {application.ai_analysis?.compatibility_score && (
                    <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl p-3 mb-4 border border-yellow-200">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium text-yellow-800">Score de compatibilit√© IA</span>
                        <div className="flex items-center">
                          <FontAwesomeIcon icon={faStar} className="text-yellow-500 mr-2" />
                          <span className="font-bold text-yellow-800">{parseFloat(application.ai_analysis.compatibility_score).toFixed(1)}%</span>
                        </div>
                      </div>
                      <div className="w-full bg-yellow-200 rounded-full h-2 mt-2">
                        <div 
                          className="bg-gradient-to-r from-yellow-400 to-orange-500 h-2 rounded-full transition-all duration-1000"
                          style={{ width: `${application.ai_analysis.compatibility_score}%` }}
                        ></div>
                      </div>
                    </div>
                  )}

                  {/* Actions */}
                  <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                    <button
                      onClick={() => navigate(`/emploi/${application.job_offer?.id}`)}
                      className="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-300 text-sm font-medium"
                    >
                      <FontAwesomeIcon icon={faEye} className="mr-2" />
                      Voir d√©tails
                    </button>
                    
                    <div className="flex items-center gap-2">
                      {application.application?.status === 'PENDING' && (
                        <button
                          onClick={() => updateApplicationStatus(application.application.id, 'WITHDRAWN')}
                          disabled={actionLoading === application.application.id}
                          className="p-2 text-orange-600 hover:text-orange-700 hover:bg-orange-50 rounded-lg transition-all duration-300 disabled:opacity-50"
                          title="Retirer la candidature"
                        >
                          {actionLoading === application.application.id ? (
                            <Loader />
                          ) : (
                            <FontAwesomeIcon icon={faUndo} />
                          )}
                        </button>
                      )}
                      
                      {application.cv && (
                        <a
                          href={application.cv}
                          download
                          className="p-2 text-green-600 hover:text-green-700 hover:bg-green-50 rounded-lg transition-all duration-300"
                          title="T√©l√©charger le CV"
                        >
                          <FontAwesomeIcon icon={faDownload} />
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          // Vue en tableau (code existant adapt√©)
          <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gradient-to-r from-gray-50 to-blue-50">
                  <tr>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider cursor-pointer hover:bg-blue-100 transition-colors"
                        onClick={() => handleSort('application__created_at')}>
                      <div className="flex items-center gap-2">
                        Date
                        {getSortIcon('application__created_at')}
                      </div>
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Offre
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider cursor-pointer hover:bg-blue-100 transition-colors"
                        onClick={() => handleSort('application__status')}>
                      <div className="flex items-center gap-2">
                        Statut
                        {getSortIcon('application__status')}
                      </div>
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Score IA
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-100">
                  {applications.map((application) => (
                    <tr key={application.id} className="hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 transition-all duration-300">
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        <div className="flex items-center">
                          <FontAwesomeIcon icon={faCalendarAlt} className="text-blue-500 mr-3" />
                          {formatDate(application.application?.created_at)}
                        </div>
                      </td>
                      
                      <td className="px-6 py-4">
                        <div className="flex-shrink-0">
                          <div className="text-sm font-semibold text-gray-900 mb-1">
                            {application.job_offer?.title || 'Titre non disponible'}
                          </div>
                          <div className="text-sm text-gray-500 space-y-1">
                            <div className="flex items-center">
                              <FontAwesomeIcon icon={faBuilding} className="text-blue-500 mr-2 w-4" />
                              {application.job_offer?.recruiter?.company_name || 'Entreprise non disponible'}
                            </div>
                            <div className="flex items-center">
                              <FontAwesomeIcon icon={faMapMarkerAlt} className="text-green-500 mr-2 w-4" />
                              {application.job_offer?.location || 'Localisation non disponible'}
                            </div>
                          </div>
                        </div>
                      </td>
                      
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full ${getStatusClass(application.application?.status)}`}>
                          {translateStatus(application.application?.status)}
                        </span>
                      </td>
                      
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {application.ai_analysis?.compatibility_score ? (
                          <div className="flex items-center">
                            <FontAwesomeIcon icon={faStar} className="text-yellow-500 mr-2" />
                            <span className="font-semibold">{parseFloat(application.ai_analysis.compatibility_score).toFixed(1)}%</span>
                          </div>
                        ) : (
                          <span className="text-gray-400">Non √©valu√©</span>
                        )}
                      </td>
                      
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => navigate(`/emploi/${application.job_offer?.id}`)}
                            className="text-blue-600 hover:text-blue-700 p-2 rounded-lg hover:bg-blue-50 transition-all duration-300"
                            title="Voir les d√©tails"
                          >
                            <FontAwesomeIcon icon={faEye} />
                          </button>
                          
                          {application.application?.status === 'PENDING' && (
                            <button
                              onClick={() => updateApplicationStatus(application.application.id, 'WITHDRAWN')}
                              disabled={actionLoading === application.application.id}
                              className="text-orange-600 hover:text-orange-700 p-2 rounded-lg hover:bg-orange-50 transition-all duration-300 disabled:opacity-50"
                              title="Retirer la candidature"
                            >
                              {actionLoading === application.application.id ? (
                                <Loader />
                              ) : (
                                <FontAwesomeIcon icon={faUndo} />
                              )}
                            </button>
                          )}
                          
                          {application.cv && (
                            <a
                              href={application.cv}
                              download
                              className="text-green-600 hover:text-green-700 p-2 rounded-lg hover:bg-green-50 transition-all duration-300"
                              title="T√©l√©charger le CV"
                            >
                              <FontAwesomeIcon icon={faDownload} />
                            </a>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Pagination moderne */}
        {!loading && totalPages > 1 && (
          <div className="mt-8">
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={handlePageChange}
              totalItems={totalCount}
              itemsPerPage={pageSize}
            />
          </div>
        )}
      </div>

      {/* CSS pour les animations */}
      <style jsx>{`
        @keyframes slideDown {
          from {
            opacity: 0;
            transform: translateY(-10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        .animate-slideDown {
          animation: slideDown 0.3s ease-out;
        }
      `}</style>
    </div>
  );
};

export default EmploiCandidature; 