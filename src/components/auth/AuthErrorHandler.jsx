import React, { useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';

/**
 * Composant pour gÃ©rer globalement les erreurs d'authentification
 * Intercepte les erreurs 401 et force la dÃ©connexion
 */
const AuthErrorHandler = ({ children }) => {
  const { handleAuthError } = useAuth();

  useEffect(() => {
    // Fonction pour intercepter les erreurs globales
    const handleGlobalError = (event) => {
      // VÃ©rifier si c'est une erreur d'authentification
      if (event.error && event.error.status === 401) {
        console.log('ðŸš¨ Erreur 401 dÃ©tectÃ©e globalement');
        handleAuthError();
      }
    };

    // Fonction pour intercepter les erreurs de fetch
    const handleFetchError = (event) => {
      if (event.detail && event.detail.status === 401) {
        console.log('ðŸš¨ Erreur 401 fetch dÃ©tectÃ©e globalement');
        handleAuthError();
      }
    };

    // Fonction pour intercepter les erreurs d'authentification personnalisÃ©es
    const handleAuthErrorEvent = (event) => {
      if (event.detail && event.detail.status === 401) {
        console.log('ðŸš¨ Ã‰vÃ©nement auth-error dÃ©tectÃ©:', event.detail);
        handleAuthError();
      }
    };

    // Ã‰couter les erreurs globales
    window.addEventListener('error', handleGlobalError);
    window.addEventListener('unhandledrejection', handleGlobalError);
    
    // Ã‰couter les erreurs de fetch
    window.addEventListener('fetch-error', handleFetchError);
    
    // Ã‰couter les erreurs d'authentification personnalisÃ©es
    window.addEventListener('auth-error', handleAuthErrorEvent);

    // Nettoyage
    return () => {
      window.removeEventListener('error', handleGlobalError);
      window.removeEventListener('unhandledrejection', handleGlobalError);
      window.removeEventListener('fetch-error', handleFetchError);
      window.removeEventListener('auth-error', handleAuthErrorEvent);
    };
  }, [handleAuthError]);

  return <>{children}</>;
};

export default AuthErrorHandler; 